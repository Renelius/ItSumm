<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.gslab.pepper.config.plaintext.PlainTextConfigElement guiclass="TestBeanGUI" testclass="com.gslab.pepper.config.plaintext.PlainTextConfigElement" testname="Pepper-Box PlainText Config" enabled="true">
          <stringProp name="jsonSchema">
		{
		&quot;protocolVersion&quot;:1,
		&quot;securityKeyId&quot;:0,
		&quot;prefix&quot;:{{BOOLEAN()}},
		&quot;rte&quot;:{{BOOLEAN()}},
		&quot;ena&quot;:{{BOOLEAN()}},
		&quot;cmp&quot;:{{BOOLEAN()}},
		&quot;pr&quot;:{{BOOLEAN()}},
		&quot;headerLength&quot;:{{RANDOM_INT_RANGE(0,30)}},
	        &quot;frameDataLength&quot;:{{RANDOM_INT_RANGE(0,1000)}},
	        &quot;headerEncoding&quot;:0,
	  	&quot;packetIdentifier&quot;:{{RANDOM_INT_RANGE(0,1000000)}},
		&quot;packetType&quot;:{{RANDOM_INT_RANGE(0,10)}},
	  	&quot;peerAddress&quot;:0,
		&quot;recipientAddress&quot;:0,
		&quot;timeToLive&quot;:0,
		&quot;headerCheckSum&quot;:{{RANDOM_INT_RANGE(0,300)}},
		&quot;records&quot;:[
		  {
		   &quot;persisted&quot;:{{BOOLEAN()}},
		   &quot;recordLength&quot;:{{RANDOM_INT_RANGE(0,100000)}},
		   &quot;recordNumber&quot;:{{RANDOM_INT_RANGE(0,100000)}},
		   &quot;ssod&quot;:{{BOOLEAN()}},
		   &quot;rsod&quot;:{{BOOLEAN()}},
		   &quot;rpp&quot;:&quot;{{RANDOM_ALPHA_NUMERIC(&quot;[B@32a4e832875GFSLKHG0sag&quot;,10)}}&quot;,
		   &quot;tmfe&quot;:{{BOOLEAN()}},
		   &quot;evfe&quot;:{{BOOLEAN()}},
		   &quot;obfe&quot;:{{BOOLEAN()}},
		   &quot;objectId&quot;:{{RANDOM_INT_RANGE(0,200000000)}},
		   &quot;eventId&quot;:0,
		   &quot;time&quot;:&quot;{{DATE(&quot;yyyy-MM-dd HH:mm:ss&quot;)}}&quot;,
		   &quot;sourceServiceType&quot;:{{RANDOM_INT_RANGE(0,2)}},
		   &quot;recipientServiceType&quot;:{{RANDOM_INT_RANGE(0,50)}},
		   &quot;subrecord&quot;:{
		     &quot;subrecordType&quot;:{{RANDOM_INT_RANGE(0,20)}},
		     &quot;subrecordLength&quot;:{{RANDOM_INT_RANGE(0,100000)}},
		     &quot;subrecordData&quot;:{
		       &quot;navigationTime&quot;:&quot;{{DATE(&quot;yyyy-MM-dd HH:mm:ss&quot;)}}&quot;,
		       &quot;latitude&quot;:{{RANDOM_FLOAT_RANGE(1.0F,  56.59434737092684F)}},
		       &quot;longitude&quot;:{{RANDOM_FLOAT_RANGE(1.0F,  56.59434737092684F)}},
		       &quot;alth&quot;:{{BOOLEAN()}},
		       &quot;lohs&quot;:{{BOOLEAN()}},
		       &quot;lahs&quot;:{{BOOLEAN()}},
		       &quot;mv&quot;:{{BOOLEAN()}},
		       &quot;bb&quot;:{{BOOLEAN()}},
		       &quot;cs&quot;:{{BOOLEAN()}},
		       &quot;fix&quot;:{{BOOLEAN()}},
		       &quot;vld&quot;:{{BOOLEAN()}},
		       &quot;speed&quot;:{{RANDOM_FLOAT_RANGE(1.0F,  50000.0F)}},
		       &quot;direction&quot;:{{RANDOM_INT_RANGE(0,200)}},
		       &quot;odometr&quot;:&quot;{{RANDOM_ALPHA_NUMERIC(&quot;[B@32a4e832875GFSLKHG0sag&quot;,10)}}&quot;,
		       &quot;digitalInputs&quot;:{{RANDOM_INT_RANGE(0,1)}},
		       &quot;source&quot;:1,
		       &quot;altitude&quot;:&quot;{{RANDOM_ALPHA_NUMERIC(&quot;[B@32a4e832875GFSLKHG0sag&quot;,10)}}&quot;,
		       &quot;sourceData&quot;:{{RANDOM_INT_RANGE(0,100000)}}
		     }
		     },
		     &quot;size&quot;:{{RANDOM_INT_RANGE(0,100000)}}


		  }
		  ],
	          &quot;servicesFrameDataCheckSum&quot;:0	  
			
		}	
			
					
   </stringProp>
          <stringProp name="placeHolder">MyMsg</stringProp>
        </com.gslab.pepper.config.plaintext.PlainTextConfigElement>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="bootstrap.servers" elementType="Argument">
                <stringProp name="Argument.name">bootstrap.servers</stringProp>
                <stringProp name="Argument.value">192.168.122.12:9092</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zookeeper.servers" elementType="Argument">
                <stringProp name="Argument.name">zookeeper.servers</stringProp>
                <stringProp name="Argument.value">&lt;Zookeeper List&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka.topic.name" elementType="Argument">
                <stringProp name="Argument.name">kafka.topic.name</stringProp>
                <stringProp name="Argument.value">2part_test</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="key.serializer" elementType="Argument">
                <stringProp name="Argument.name">key.serializer</stringProp>
                <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="value.serializer" elementType="Argument">
                <stringProp name="Argument.name">value.serializer</stringProp>
                <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="compression.type" elementType="Argument">
                <stringProp name="Argument.name">compression.type</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="batch.size" elementType="Argument">
                <stringProp name="Argument.name">batch.size</stringProp>
                <stringProp name="Argument.value">16384</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="linger.ms" elementType="Argument">
                <stringProp name="Argument.name">linger.ms</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="buffer.memory" elementType="Argument">
                <stringProp name="Argument.name">buffer.memory</stringProp>
                <stringProp name="Argument.value">33554432</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="acks" elementType="Argument">
                <stringProp name="Argument.name">acks</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="send.buffer.bytes" elementType="Argument">
                <stringProp name="Argument.name">send.buffer.bytes</stringProp>
                <stringProp name="Argument.value">131072</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="receive.buffer.bytes" elementType="Argument">
                <stringProp name="Argument.name">receive.buffer.bytes</stringProp>
                <stringProp name="Argument.value">32768</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="security.protocol" elementType="Argument">
                <stringProp name="Argument.name">security.protocol</stringProp>
                <stringProp name="Argument.value">PLAINTEXT</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="message.placeholder.key" elementType="Argument">
                <stringProp name="Argument.name">message.placeholder.key</stringProp>
                <stringProp name="Argument.value">MyMsg</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kerberos.auth.enabled" elementType="Argument">
                <stringProp name="Argument.name">kerberos.auth.enabled</stringProp>
                <stringProp name="Argument.value">NO</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.security.auth.login.config" elementType="Argument">
                <stringProp name="Argument.name">java.security.auth.login.config</stringProp>
                <stringProp name="Argument.value">&lt;JAAS File Location&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.security.krb5.conf" elementType="Argument">
                <stringProp name="Argument.name">java.security.krb5.conf</stringProp>
                <stringProp name="Argument.value">&lt;krb5.conf location&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sasl.kerberos.service.name" elementType="Argument">
                <stringProp name="Argument.name">sasl.kerberos.service.name</stringProp>
                <stringProp name="Argument.value">kafka</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.gslab.pepper.sampler.PepperBoxKafkaSampler</stringProp>
        </JavaSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
